---
name: Continuous Deployment

on:
  push:
    # Run workflow every time something is pushed to this branch (for testing reasons)
    branches:
      - 86-server-monitoring-rebased

  workflow_dispatch:
    manual: true

jobs:
  # tests:
  #   name: Tests
  #   runs-on: ubuntu-latest

  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v4


  #   - name: Set up Docker Buildx
  #     uses: docker/setup-buildx-action@v3

  #   - name: Build Docker Container
  #     run: |
  #       docker compose up -d

  #   - name: Set up Python
  #     uses: actions/setup-python@v5
  #     with:
  #       python-version: '3.x'

  #   - name: Install dependencies
  #     run: |
  #       python -m pip install --upgrade pip
  #       pip install pytest Requests

  #   - name: Test with refactored_minitwit_tests.py
  #     run: |
  #       pytest refactored_minitwit_tests.py

  #   - name: Test with sim_api_test.py
  #     run: |
  #       pytest sim_api_test.py

  #   - name: Destroy Docker artifacts after tests
  #     run: |
  #       docker compose down -v --rmi local

  # push:
  #   name: Build & Push
  #   runs-on: ubuntu-latest
  #   needs: tests

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ vars.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Build and Push Docker image
  #       uses: docker/build-push-action@v6
  #       with:
  #         context: .
  #         file: ./Dockerfile
  #         push: true
  #         tags: ${{ vars.DOCKER_USERNAME }}/minitwit:monitoringtest
  #         #tags: ${{ vars.DOCKER_USERNAME }}/minitwit:latest
  #         cache-from: type=registry,ref=${{ vars.DOCKER_USERNAME }}/minitwit:webbuildcache
  #         cache-to: type=registry,ref=${{ vars.DOCKER_USERNAME }}/minitwit:webbuildcache,mode=max
          
  #     - name: Build and Push Grafana Docker image 
  #       uses: docker/build-push-action@v6
  #       with:
  #         context: ./.infrastructure/grafana
  #         file: ./.infrastructure/grafana/Dockerfile
  #         push: true
  #         tags: ${{ vars.DOCKER_USERNAME }}/grafana:monitoringtest
  #         #tags: ${{ vars.DOCKER_USERNAME }}/grafana:latest
  #         cache-from: type=registry,ref=${{ vars.DOCKER_USERNAME }}/grafana:webbuildcache
  #         cache-to: type=registry,ref=${{ vars.DOCKER_USERNAME }}/grafana:webbuildcache,mode=max  
      
  #     - name: Build and Push Prometheus Docker image 
  #       uses: docker/build-push-action@v6
  #       with:
  #         context: ./.infrastructure/prometheus
  #         file: ./.infrastructure/prometheus/Dockerfile
  #         push: true
  #         tags: ${{ vars.DOCKER_USERNAME }}/prometheus:monitoringtest
  #         #tags: ${{ vars.DOCKER_USERNAME }}/prometheus:latest
  #         cache-from: type=registry,ref=${{ vars.DOCKER_USERNAME }}/prometheus:webbuildcache
  #         cache-to: type=registry,ref=${{ vars.DOCKER_USERNAME }}/prometheus:webbuildcache,mode=max
  #         build-args: PROMETHEUS_YML=prometheus-prod.yml
  

  deploy:
    name: Deploy to DigitalOcean
    runs-on: ubuntu-latest
    # needs: push

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$TEST_ENV_SSH_SECRET_KEY" > ~/.ssh/id_do_test_env_rsa
          chmod 600 ~/.ssh/id_do_test_env_rsa
        env:
          TEST_ENV_SSH_SECRET_KEY: ${{ secrets.TEST_ENV_SSH_SECRET_KEY }}

      - name: copy files to target server via scp
        uses: appleboy/scp-action@master
        with:
          host: ${{ vars.TEST_ENV_SSH_HOST }}
          username: ${{ vars.SSH_USER }}
          key: ${{ secrets.TEST_ENV_SSH_SECRET_KEY }}
          source: "./docker-compose-prod.yml"
          target: "~/.deploy/${{ github.event.repository.name }}/"

      - name: Deploy to Digital Ocean droplet via SSH action
        uses: appleboy/ssh-action@master
        with:
          host: ${{ vars.TEST_ENV_SSH_HOST }}
          username: ${{ vars.SSH_USER }}
          key: ${{ secrets.TEST_ENV_SSH_SECRET_KEY }}
          script: |
            cd ~/.deploy/${{ github.event.repository.name }}
            DOCKER_USERNAME=${{ vars.DOCKER_USERNAME }} docker compose -f docker-compose-prod.yml up -d --pull always