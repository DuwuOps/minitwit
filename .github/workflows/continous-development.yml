---
name: Continuous Deployment

on:
  push:
    # Run workflow every time something is pushed to this branch (for testing reasons)
    branches:
      - main

  workflow_dispatch:
    manual: true

jobs:
  tests:
    name: Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4


    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker Container
      run: |
        docker compose up -d

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest Requests

    - name: Test with refactored_minitwit_tests.py
      run: |
        pytest refactored_minitwit_tests.py

    - name: Test with sim_api_test.py
      run: |
        pytest sim_api_test.py

    - name: Destroy Docker artifacts after tests
      run: |
        docker compose down -v --rmi local

  push:
    name: Build & Push
    runs-on: ubuntu-latest
    needs: tests

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ vars.DOCKER_USERNAME }}/minitwit:latest
          cache-from: type=registry,ref=${{ vars.DOCKER_USERNAME }}/minitwit:webbuildcache
          cache-to: type=registry,ref=${{ vars.DOCKER_USERNAME }}/minitwit:webbuildcache,mode=max

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: tests

    steps:
      - name: This is where I would put my release 
        run: |
          echo "IF I HAD ONE!"

  deploy:
    name: Deploy to DigitalOcean
    runs-on: ubuntu-latest
    needs: push

    steps:
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/id_do_rsa
          chmod 600 ~/.ssh/id_do_rsa
        env:
          SSH_KEY: ${{ secrets.SSH_KEY }}

      - name: Deploy to Digital Ocean droplet via SSH action
        env:
          DOCKER_IMAGE: ${{ vars.DOCKER_USERNAME }}/minitwit:latest
        uses: appleboy/ssh-action@master
        with:
          host: ${{ vars.SSH_HOST }}
          username: ${{ vars.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          envs: DOCKER_IMAGE
          script: |
            docker rm $(docker stop $(docker ps -a --filter ancestor=$DOCKER_IMAGE --format="{{.ID}}"))
            docker image pull $DOCKER_IMAGE
            sudo docker run -d -p 0.0.0.0:80:8000 --restart=always -v sqliteDB:/minitwit/tmp $DOCKER_IMAGE