---
name: Continuous Deployment (Testing Environment)

on:
  push:
    # Run workflow every time something is pushed to this branch (for testing reasons)
    branches:
      - deployment-pipeline

  workflow_dispatch:
    manual: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push minitwit
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ vars.DOCKER_USERNAME }}/minitwit:latest
          cache-from: type=registry,ref=${{ vars.DOCKER_USERNAME }}/minitwit:webbuildcache
          cache-to: type=registry,ref=${{ vars.DOCKER_USERNAME }}/minitwit:webbuildcache,mode=max

      - name: Configure SSH
        run: |
          echo $TEST_ENV_SSH_HOST
          mkdir -p ~/.ssh/
          echo "$TEST_ENV_SSH_SECRET_KEY" > ~/.ssh/id_do_test_env_rsa
          chmod 600 ~/.ssh/id_do_test_env_rsa
        env:
          TEST_ENV_SSH_SECRET_KEY: ${{ secrets.TEST_ENV_SSH_SECRET_KEY }}
          TEST_ENV_SSH_HOST: ${{ vars.TEST_ENV_SSH_HOST }}

      - name: Deploy to server
        # Configure the ~./bash_profile and deploy.sh file on the Vagrantfile
        run: |
          ssh $SSH_USER@$TEST_ENV_SSH_HOST -i ~/.ssh/id_do_test_env_rsa -o StrictHostKeyChecking=no
          echo $DOCKER_USERNAME
          docker rm $(docker stop $(docker ps -a --filter ancestor=$DOCKER_USERNAME/minitwit:latest --format="{{.ID}}"))
          docker image pull $DOCKER_USERNAME/minitwit:latest
          sudo docker run -d -p 0.0.0.0:80:8000 --restart=always -v /var/minitwit:/app/tmp $DOCKER_USERNAME/minitwit:latest
        env:
          SSH_USER: ${{ vars.SSH_USER }}
          TEST_ENV_SSH_HOST: ${{ vars.TEST_ENV_SSH_HOST }}
          DOCKER_USERNAME: ${{ vars.DOCKER_USERNAME }}
          