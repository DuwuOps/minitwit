---
name: Continuous Deployment (Testing Environment)

on:
  push:
    # Run workflow every time something is pushed to this branch (for testing reasons)
    branches:
      - deployment-pipeline

  workflow_dispatch:
    manual: true

jobs:
  build:
    name: Build Docker image and Push it to DockerHub
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ vars.DOCKER_USERNAME }}/minitwit:latest
          cache-from: type=registry,ref=${{ vars.DOCKER_USERNAME }}/minitwit:webbuildcache
          cache-to: type=registry,ref=${{ vars.DOCKER_USERNAME }}/minitwit:webbuildcache,mode=max

  tests:
    name: Test program
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: This is where I would put my test
        run: |
          echo "IF I HAD ONE!"

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: tests

    steps:
      - name: This is where I would put my release 
        run: |
          echo "IF I HAD ONE!"

  deploy:
    name: Connect to droplet on DigitalOcean and Update Docker image
    runs-on: ubuntu-latest
    needs: tests

    steps:
      - name: Configure SSH
        run: |
          echo $TEST_ENV_SSH_HOST
          mkdir -p ~/.ssh/
          echo "$TEST_ENV_SSH_SECRET_KEY" > ~/.ssh/id_do_test_env_rsa
          chmod 600 ~/.ssh/id_do_test_env_rsa
        env:
          TEST_ENV_SSH_SECRET_KEY: ${{ secrets.TEST_ENV_SSH_SECRET_KEY }}
          TEST_ENV_SSH_HOST: ${{ vars.TEST_ENV_SSH_HOST }}

      - name: Deploy to Digital Ocean droplet via SSH action
        env:
          DOCKER_IMAGE: ${{ vars.DOCKER_USERNAME }}/minitwit:latest
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.TEST_ENV_SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.TEST_ENV_SSH_SECRET_KEY }}
          envs: DOCKER_IMAGE
          script: |
            docker rm $(docker stop $(docker ps -a --filter ancestor=$DOCKER_IMAGE --format="{{.ID}}"))
            docker image pull $DOCKER_IMAGE
            sudo docker run -d -p 0.0.0.0:80:8000 --restart=always -v sqliteDB:/minitwit/tmp $DOCKER_IMAGE