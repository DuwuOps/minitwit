---
name: Continuous Deployment

on:
  push:
    # Run workflow every time something is pushed to this branch (for testing reasons)
    branches:
      - main

  workflow_dispatch:

jobs:
  tests:
    name: Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4


    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker Container
      run: |
        docker compose up -d

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest Requests

    - name: Test with refactored_minitwit_tests.py
      run: |
        pytest refactored_minitwit_tests.py

    - name: Test with sim_api_test.py
      run: |
        pytest sim_api_test.py

    - name: Destroy Docker artifacts after tests
      run: |
        docker compose down -v --rmi local

  push:
    name: Build & Push
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push images
        uses: docker/bake-action@v3
        env:
          DOCKER_USERNAME: ${{ vars.DOCKER_USERNAME }}
        with:
          load: true
          push: true
          files: |
            docker-compose.yml
          set: |
            *.cache-to=type=gha,mode=max                                                                                
            *.cache-from=type=gha
    
  release:
    name: Release
    permissions: 
      contents: write
    runs-on: ubuntu-latest
    needs: tests

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Get all tags and history 

      - name: Determine next version
        id: next-version
        run : | 
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"
          
          MAJOR=$(echo $LATEST_TAG | grep -Po '\d+(?=\.\d+\.\d+$)')
          echo "MAJOR: $MAJOR"
          MINOR=$(echo $LATEST_TAG | grep -Po '(?<=\.)\d+(?=\.\d+$)')
          echo "MINOR $MINOR"
          PATCH=$(echo $LATEST_TAG | grep -Po '(?<=\.)\d+(?=$)')
          echo "PATCH : $PATCH"
          
          NEW_MINOR=$((MINOR + 1))
          NEW_TAG="v${MAJOR}.${NEW_MINOR}.0"
          echo "NEW_TAG : $NEW_TAG"
          
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_OUTPUT

      - name: Create and push tag
        env:
          TAG: ${{ steps.next-version.outputs.NEW_TAG }}
        run: |
          echo "Creating tag : $TAG"
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag ${TAG}
          git push origin ${TAG}

      - name: Download dependencies and build binary
        run: |
          go mod download
          go build -o minitwit ./src/main.go

      - name: Create release with binary files
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ steps.next-version.outputs.NEW_TAG }}
        run: |
          echo "Creating tag : $TAG"

          # Find the executable name
          BINARY_NAME=$(basename $(go list -m))

          gh release create "${TAG}" \
              --repo="$GITHUB_REPOSITORY" \
              --title="minitwit ${TAG}" \
              --generate-notes

          gh release upload "${TAG}" \
            ${BINARY_NAME} \
            --repo="$GITHUB_REPOSITORY"

  deploy:
    name: Deploy to DigitalOcean
    runs-on: ubuntu-latest
    needs: push

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/id_do_rsa
          chmod 600 ~/.ssh/id_do_rsa
        env:
          SSH_KEY: ${{ secrets.SSH_KEY }}

      - name: copy files to target server via scp
        uses: appleboy/scp-action@master
        with:
          host: ${{ vars.SSH_HOST }}
          username: ${{ vars.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: "./docker-compose.yml,./docker-compose.deploy.yml"
          target: "~/.deploy/${{ github.event.repository.name }}/"

      - name: Deploy to Digital Ocean droplet via SSH action
        env:
          DB_USER: ${{ vars.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_HOST: ${{ vars.DB_HOST }}
          DB_PORT: ${{ vars.DB_PORT }}
          DB_NAME: ${{ vars.DB_NAME }}
        uses: appleboy/ssh-action@master
        with:
          host: ${{ vars.SSH_HOST }}
          username: ${{ vars.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          envs:
            DB_USER,
            DB_PASSWORD,
            DB_HOST,
            DB_PORT,
            DB_NAME
          script: |
            cd ~/.deploy/${{ github.event.repository.name }}
            DOCKER_USERNAME=${{ vars.DOCKER_USERNAME }} docker compose \
              -f docker-compose.yml \
              -f docker-compose.deploy.yml \
              up -d --pull always