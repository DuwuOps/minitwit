---
  name: Test Deployment
  
  on:
    push:
      # Run workflow every time something is pushed to this branch (for testing reasons)
      tags:        
        - 'test-env*'
  
  jobs:
    tests:
      name: Tests
      runs-on: ubuntu-latest
  
      steps:
      - name: Checkout
        uses: actions/checkout@v4
  
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
  
      - name: Build Docker Container
        run: |
          docker compose up -d
  
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
  
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest Requests
  
      - name: Test with refactored_minitwit_tests.py
        run: |
          pytest refactored_minitwit_tests.py
  
      - name: Test with sim_api_test.py
        run: |
          pytest sim_api_test.py
  
      - name: Destroy Docker artifacts after tests
        run: |
          docker compose down -v --rmi local
  
    push:
      name: Build & Push
      runs-on: ubuntu-latest
  
      steps:
        - name: Checkout
          uses: actions/checkout@v4
  
        - name: Login to Docker Hub
          uses: docker/login-action@v3
          with:
            username: ${{ vars.DOCKER_USERNAME }}
            password: ${{ secrets.DOCKER_PASSWORD }}
  
        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v3
  
        - name: Build and Push Docker image
          uses: docker/build-push-action@v6
          with:
            context: .
            file: ./Dockerfile
            push: true
            tags: ${{ vars.DOCKER_USERNAME }}/minitwit:test
            cache-from: type=registry,ref=${{ vars.DOCKER_USERNAME }}/minitwit:webbuildcache
            cache-to: type=registry,ref=${{ vars.DOCKER_USERNAME }}/minitwit:webbuildcache,mode=max
  
    deploy:
      name: Deploy to DigitalOcean
      runs-on: ubuntu-latest
      defaults:
        run:
          working-directory: ./
      needs: push
  
      steps:
        - name: Checkout code
          uses: actions/checkout@v2

        - name: Configure SSH
          run: |
            mkdir -p ~/.ssh/
            echo "$TEST_ENV_SSH_SECRET_KEY" > ~/.ssh/id_do_test_env_rsa
            chmod 600 ~/.ssh/id_do_test_env_rsa
          env:
            TEST_ENV_SSH_SECRET_KEY: ${{ secrets.TEST_ENV_SSH_SECRET_KEY }}
  
        - name: Deploy to Digital Ocean droplet via SSH action
          env:
            DOCKER_IMAGE: ${{ vars.DOCKER_USERNAME }}/minitwit:test
            ELASTIC_VERSION: ${{ vars.ELASTIC_VERSION }}
            ELASTIC_PASSWORD: ${{ secrets.ELASTIC_PASSWORD }}
            LOGSTASH_INTERNAL_PASSWORD: ${{ secrets.LOGSTASH_INTERNAL_PASSWORD }}
            KIBANA_SYSTEM_PASSWORD: ${{ secrets.KIBANA_SYSTEM_PASSWORD }}
            FILEBEAT_INTERNAL_PASSWORD: ${{ secrets.FILEBEAT_INTERNAL_PASSWORD }}
            BEATS_SYSTEM_PASSWORD: ${{ secrets.BEATS_SYSTEM_PASSWORD }}
          uses: 
            appleboy/ssh-action@master
          with:
            host: ${{ vars.TEST_ENV_SSH_HOST }}
            username: ${{ vars.SSH_USER }}
            key: ${{ secrets.TEST_ENV_SSH_SECRET_KEY }}
            envs: DOCKER_IMAGE,ELASTIC_PASSWORD,KIBANA_SYSTEM_PASSWORD,LOGSTASH_INTERNAL_PASSWORD,FILEBEAT_INTERNAL_PASSWORD,BEATS_SYSTEM_PASSWORD
            script: |
              
              if [ ! -d "/root/minitwit" ]; then
                git clone https://github.com/DuwuOps/minitwit.git /root/minitwit
                git checkout 98-logging
                cd root/minitwit
              else
                cd /root/minitwit
                git checkout 98-logging
                git pull
              fi
              
              export ELASTIC_VERSION=${ELASTIC_VERSION:-8.12.2}
              export ELASTIC_PASSWORD=${ELASTIC_PASSWORD:-changeme}
              export KIBANA_SYSTEM_PASSWORD=${KIBANA_SYSTEM_PASSWORD:-changeme}
              export LOGSTASH_INTERNAL_PASSWORD=${LOGSTASH_INTERNAL_PASSWORD:-changeme}
              export FILEBEAT_INTERNAL_PASSWORD=${FILEBEAT_INTERNAL_PASSWORD:-changeme}
              export BEATS_SYSTEM_PASSWORD=${BEATS_SYSTEM_PASSWORD:-changeme}

              docker compose up setup
              docker compose up -d

              docker rm $(docker stop $(docker ps -a --filter ancestor=$DOCKER_IMAGE --format="{{.ID}}")) || true
              docker image pull $DOCKER_IMAGE
              sudo docker run -d -p 0.0.0.0:80:8000 --restart=always -v sqliteDB:/minitwit/tmp $DOCKER_IMAGE
      