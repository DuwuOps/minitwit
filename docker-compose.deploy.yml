networks:
  main:
    driver: overlay
    attachable: true

services:
  app:
    build: !reset null
    ports:
      - 0.0.0.0:80:8000
    restart: always
    container_name: !reset null
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
      update_config: # update_config configures how the service should be updated. Useful for configuring rolling updates.
        parallelism: 1 # The number of containers to update at a time.
        delay: 10s # The time to wait between updating a group of containers.
        failure_action: rollback # What to do if an update fails. One of continue, rollback, or pause (default: pause).
        monitor: 30s # Duration after each task update to monitor for failure (ns|us|ms|s|m|h) (default 0s).
      rollback_config:
        parallelism: 1 # The number of containers to rollback at a time. If set to 0, all containers rollback simultaneously.
        delay: 10s # The time to wait between each container group's rollback (default 0s).

  prometheus:
    build: !reset null
    ports:
      - "0.0.0.0:9090:9090"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    container_name: !reset null
    deploy:
      placement:
        constraints:
          - node.role == manager

  alloy:
    build: !reset null
    container_name: !reset null
    deploy:
      mode: global  # Deploy on every node for comprehensive monitoring
      restart_policy:
        condition: on-failure

  loki:
    build: !reset null
    container_name: !reset null
    ports:
      - "3100:3100"
    deploy:
      placement:
        constraints:
          - node.role == manager

  grafana:
    build: !reset null
    volumes:
      - grafana-storage:/var/lib/grafana
    container_name: !reset null
    deploy:
      placement:
        constraints:
          - node.role == manager

  database: # This ensures that the web-servers do not create an internal database
    deploy:
        replicas: 0 # DO NOT DELETE

volumes:
  grafana-storage: {}